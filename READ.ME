

This solution involves setting up a web application in a Kubernetes cluster on Amazon EKS. The application consists of a static web page served using NGINX. 
The infrastructure and application are automated using Terraform, and basic monitoring (CPU, memory, and disk usage) is set up using Prometheus and Grafana.

Steps for Deployment

1.Docker 
 Build and Push Docker Image
 The app consists of a simple HTML file served using NGINX.
Create a Dockerfile: A simple Dockerfile is used to containerize the web application using the official NGINX image.
Build the Docker Image: The Docker image is built

docker build -t web-app .

Push the Image to AWS ECR: Push the built image to Amazon ECR for access by the EKS cluster.

docker push web app 

2. Provision Infrastructure with Terraform

This section deploys the necessary infrastructure, such as VPC, EKS Cluster,Security group and EKS Node Group, using Terraform.
Initialize Terraform:

terraform init

Validate the configuration:

terraform plan 

Create and apply the Terraform plan to provision the AWS resources:

terraform apply


This will create:
VPC with a public subnet.
EKS Cluster with associated IAM roles.
EKS Node Group for running worker nodes.


3.Deploy Web Application to EKS

Apply the deployment and service files:

kubectl apply -f deployment.yaml
kubectl apply -f service.yaml

4. Set Up Monitoring with Prometheus and Grafana
To monitor your application and Kubernetes cluster, 
after installing using helm as mentioned in monitoring we can now acees it through 

http://localhost:9090 -promethus
http://localhost:8080 -grafana 

5. Verify the Deployment

Check if your application is running:

kubectl get pods


Check if the service is created:

kubectl get svc

by givig this we will get external ip of the load balancer and we access the application thorugh

http://<external-ip>

Coustom dmain 

We can use AWS route 53  f0r dns managment 
